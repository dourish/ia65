
;;; IA65 -- Interactive Assembler for the 6502
;;; Assembly tables
;;;
;;; Paul Dourish, October 2019

;;; Indices into the opcode table for each addressing mode
;;;
I_IMM=3
I_ZP=4
I_ZPX=5
I_ZPY=6
I_ABS=7
I_ABSX=8
I_ABSY=9
I_INDX=10
I_INDY=11
I_ACC=12
I_IMP=13
I_REL=14
I_IZP=15

;;; Row indices into opcode table (used by the disassembler)
;;;
O_ADC=0
O_AND=1
O_ASL=2
O_BCC=3
O_BCS=4
O_BEQ=5
O_BIT=6
O_BMI=7
O_BNE=8
O_BPL=9
O_BRA=10
O_BRK=11
O_BVC=12
O_BVS=13
O_CLC=14
O_CLD=15
O_CLI=16
O_CLV=17
O_CMP=18
O_CPX=19
O_CPY=20
O_DEC=21
O_DEX=22
O_DEY=23
O_EOR=24
O_INC=25
O_INX=26
O_INY=27
O_JMP=28
O_JSR=29
O_LDA=30
O_LDX=31
O_LDY=32
O_LSR=33
O_NOP=34
O_ORA=35
O_PHA=36
O_PHP=37
O_PHX=38
O_PHY=39
O_PLA=40
O_PLP=41
O_PLX=42
O_PLY=43
O_ROL=44
O_ROR=45
O_RTI=46
O_RTS=47
O_SBC=48
O_SEC=49
O_SED=50
O_SEI=51
O_STA=52
O_STP=53
O_STX=54
O_STY=55
O_STZ=56
O_TAX=57
O_TAY=58
O_TRB=59
O_TSB=60
O_TSX=61
O_TXA=62
O_TXS=63
O_TYA=64
O_WAI=65


;;; Opcode table. 16 bytes per instruction, which comprise three
;;; bytes of the opcode itself and then 13 bytes for the instructions
;;; for each addressing mode, or $FF when there is none.
;;;
opcodes
;     OPC    IMM  ZP   ZPX  ZPY, ABS  ABSX ABSY INDX INDY ACC  IMP  REL  IZP
.byte "ADC", $69, $65, $75, $ff, $6d, $7d, $79, $61, $71, $ff, $ff, $ff, $72
.byte "AND", $29, $25, $35, $ff, $2d, $3d, $39, $21, $31, $ff, $ff, $ff, $32
.byte "ASL", $ff, $06, $16, $ff, $0e, $1e, $ff, $ff, $ff, $0a, $ff, $ff, $ff
.byte "BCC", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $90, $ff
.byte "BCS", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $b0, $ff
.byte "BEQ", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $f0, $ff
.byte "BIT", $89, $24, $34, $ff, $2c, $3c, $ff, $ff, $ff, $ff, $ff, $ff, $ff
.byte "BMI", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $30, $ff
.byte "BNE", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $d0, $ff
.byte "BPL", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $10, $ff
.byte "BRA", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $80, $ff
.byte "BRK", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $00, $ff, $ff
.byte "BVC", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $50, $ff
.byte "BVS", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $70, $ff
.byte "CLC", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $18, $ff, $ff
.byte "CLD", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $d8, $ff, $ff
;     OPC    IMM  ZP   ZPX  ZPY, ABS  ABSX ABSY INDX INDY ACC  IMP  REL  IZP
.byte "CLI", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $58, $ff, $ff
.byte "CLV", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $b8, $ff, $ff
.byte "CMP", $c9, $c5, $d5, $ff, $cd, $dd, $d9, $c1, $d1, $ff, $ff, $ff, $d2
.byte "CPX", $e0, $e4, $ff, $ff, $ec, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
.byte "CPY", $c0, $c4, $ff, $ff, $cc, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
.byte "DEC", $ff, $c6, $d6, $ff, $ce, $de, $ff, $ff, $ff, $3a, $ff, $ff, $ff
.byte "DEX", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ca, $ff, $ff
.byte "DEY", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $88, $ff, $ff
.byte "EOR", $49, $45, $55, $ff, $4d, $5d, $59, $41, $51, $ff, $ff, $ff, $b5
.byte "INC", $ff, $e6, $f6, $ff, $ee, $fe, $ff, $ff, $ff, $1a, $ff, $ff, $ff
.byte "INX", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $e8, $ff, $ff
.byte "INY", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $c8, $ff, $ff
.byte "JMP", $ff, $ff, $ff, $ff, $4c, $ff, $ff, $6c, $ff, $ff, $ff, $ff, $ff
.byte "JSR", $ff, $ff, $ff, $ff, $20, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
.byte "LDA", $a9, $a5, $b5, $ff, $ad, $bd, $b9, $a1, $b1, $ff, $ff, $ff, $b2
;     OPC    IMM  ZP   ZPX  ZPY, ABS  ABSX ABSY INDX INDY ACC  IMP  REL  IZP
.byte "LDX", $a2, $a6, $ff, $b6, $ae, $ff, $be, $ff, $ff, $ff, $ff, $ff, $ff
.byte "LDY", $a0, $a4, $b4, $ff, $ac, $bc, $ff, $ff, $ff, $ff, $ff, $ff, $ff
.byte "LSR", $ff, $46, $56, $ff, $4e, $5e, $ff, $ff, $ff, $ff, $ff, $ff, $ff
.byte "NOP", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ea, $ff, $ff
.byte "ORA", $09, $05, $15, $ff, $0d, $1d, $19, $01, $11, $ff, $ff, $ff, $12
.byte "PHA", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $48, $ff, $ff
.byte "PHP", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $08, $ff, $ff
.byte "PHX", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $da, $ff, $ff
.byte "PHY", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $5a, $ff, $ff
.byte "PLA", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $68, $ff, $ff
.byte "PLP", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $28, $ff, $ff
.byte "PLX", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $fa, $ff, $ff
.byte "PLY", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $7a, $ff, $ff
.byte "ROL", $ff, $26, $36, $ff, $2e, $3e, $ff, $ff, $ff, $2a, $ff, $ff, $ff
.byte "ROR", $ff, $66, $76, $ff, $6e, $7e, $ff, $ff, $ff, $6a, $ff, $ff, $ff
.byte "RTI", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $40, $ff, $ff
;     OPC    IMM  ZP   ZPX  ZPY, ABS  ABSX ABSY INDX INDY ACC  IMP  REL  IZP
.byte "RTS", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $60, $ff, $ff
.byte "SBC", $e9, $e5, $f5, $ff, $ed, $fd, $f9, $e1, $f1, $ff, $ff, $ff, $f2
.byte "SEC", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $38, $ff, $ff
.byte "SED", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $f8, $ff, $ff
.byte "SEI", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $78, $ff, $ff
.byte "STA", $ff, $85, $95, $ff, $8d, $9d, $99, $81, $91, $ff, $ff, $ff, $92
.byte "STP", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $db, $ff, $ff
.byte "STX", $ff, $86, $ff, $96, $8e, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
.byte "STY", $ff, $84, $94, $ff, $8c, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
.byte "STZ", $ff, $64, $74, $ff, $9c, $9e, $ff, $ff, $ff, $ff, $ff, $ff, $ff
.byte "TAX", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $aa, $ff, $ff
.byte "TAY", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $a8, $ff, $ff
.byte "TRB", $ff, $14, $ff, $ff, $1c, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
.byte "TSB", $ff, $04, $ff, $ff, $0c, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
.byte "TSX", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ba, $ff, $ff
.byte "TXA", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $8a, $ff, $ff
;     OPC    IMM  ZP   ZPX  ZPY, ABS  ABSX ABSY INDX INDY ACC  IMP  REL  IZP
.byte "TXS", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $9a, $ff, $ff
.byte "TYA", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $98, $ff, $ff
.byte "WAI", $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $cb, $ff, $ff
.byte $00, $00, $00, $00, $00, $00


;;;
;;; dirtable holds pointers to the code handlers for directives
;;;
dirtable
.byte 3, "ORG"
.word orgdir
.byte 4, "BYTE"
.word bytedir
.byte 4, "WORD"
.word worddir
.byte 3, "EQU"
.word equdir
.byte 4, "DUMP"
.word dumpdir
.byte 3, "DIS"
.word disdir
.byte 4, "TEST"
.word testdir
.byte $00


;; SPECIAL CASES -- JMP (IND)


;;;
;;; Disassembler tables
;;;

cc01optable
;  .word ORAstr, ANDstr, EORstr, ADCstr, STAstr, LDAstr, CMPstr, SBCstr
  .word O_ORA, O_AND, O_EOR, O_ADC, O_STA, O_LDA, O_CMP, O_SBC
cc01adtable
  .word dizpx, dzp, dimm, dabs, dizpy, dzpx, dabsy, dabsx

cc10optable
;  .word ASLstr, ROLstr, LSRstr, RORstr, STXstr, LDXstr, DECstr, INCstr
  .word O_ASL, O_ROL, O_LSR, O_ROR, O_STX, O_LDX, O_DEC, O_INC
cc10adtable
  .word dimm, dzp, dacc, dabs, dizp, dzpx, err, dabsx

cc00optable
  ;; yes, JMP appears here twice... it's not a mistake...
;  .word TSBstr, BITstr, JMPstr, JMPstr, STYstr, LDYstr, CPYstr, CPXstr
  .word O_TSB, O_BIT, O_JMP, O_JMP, O_STY, O_LDY, O_CPY, O_CPX
cc00adtable
  .word dimm, dzp, err, dabs, err, dzpx, err, dabsx

branchoptable
  .word O_BPL, O_BMI, O_BVC, O_BVS, O_BCC, O_BCS, O_BNE, O_BEQ

single08table
;  .word PHPstr, CLCstr, PLPstr, SECstr, PHAstr, CLIstr, PLAstr, SEIstr
  .word O_PHP, O_CLC, O_PLP, O_SEC, O_PHA, O_CLI, O_PLA, O_SEI
;  .word DEYstr, TYAstr, TAYstr, CLVstr, INYstr, CLDstr, INXstr, SEDstr
  .word O_DEY, O_TYA, O_TAY, O_CLV, O_INY, O_CLD, O_INX, O_SED

singlexatable
  .word O_TXA, O_TXS, O_TAX, O_TSX, O_DEX, O_PHX, O_NOP, O_PLX

specialcasetable
  .byte $00
  .word dobrk
  .byte $20
  .word dojsr
  .byte $40
  .word dorti
  .byte $60
  .word dorts
  .byte $80
  .word dobra
  .byte $14
  .word dotrbzp
  .byte $1C
  .word dotrbabs
  .byte $64
  .word dostzzp
  .byte $9C
  .word dostzabs
  .byte $74
  .word dostzzpx
  .byte $9E
  .word dostzabsx
  .byte $1A
  .word doinca
  .byte $3A
  .word dodeca
  .byte $5A
  .word dophy
  .byte $7A
  .word doply
  .byte $DA
  .word dophx
  .byte $FA
  .word doplx
  .byte $FF
  .word $FFFF


errstr .byte "???"



